#!/usr/bin/env bash
set -ex

VERSION_REGEX="/(v?([0-9]+(\.[0-9]+)*?)(-([0-9]+[0-9A-Za-z\-~]*(\.[0-9A-Za-z\-~]+)*)|(-?([A-Za-z\-~]+[0-9A-Za-z\-~]*(\.[0-9A-Za-z\-~]+)*)))?)$/"
TMP_OUT_FILE="./bill-of-materials-tmp.txt"
BILL_OF_MATERIALS_OUT_FILE=${BILL_OF_MATERIALS_OUT_FILE:-"./bill-of-materials.txt"}
IMAGES_ARRAY=("")

# {1} is the filename
lookupLibrariesInFile(){
    awk "${VERSION_REGEX}" "${1}" >> $TMP_OUT_FILE
    echo "awk ${VERSION_REGEX} ${1} >> $TMP_OUT_FILE"
}

# {1} value to find
appendUniqueValueImagesArr(){
    if [[ ! " ${IMAGES_ARRAY[*]} " =~ " ${1} " ]]; then
        IMAGES_ARRAY+=("$1")
        # IMAGES_ARRAY="${IMAGES_ARRAY}$1"
        echo "$1" >> $TMP_OUT_FILE
    fi
}

# {1} fileName Destination
fillEnvVarsToFile(){
    if [ "${ETCD_VERSION}" = "" ]; then
        . ./version.sh
    fi
    envsubst < $TMP_OUT_FILE > "$BILL_OF_MATERIALS_OUT_FILE"
    rm $TMP_OUT_FILE
    awk "!/#/" "${BILL_OF_MATERIALS_OUT_FILE}" > tmpfile && mv tmpfile "${BILL_OF_MATERIALS_OUT_FILE}"
}

prettyOutfile(){
    sed -e 's/^[ \t]*//;s/[ \t]*$//' -e 's/-X //g' < ./bill-of-materials.txt > tmpfile && mv tmpfile bill-of-materials.txt
}

# {1} title
addTitle(){
    echo "" >> $TMP_OUT_FILE && echo "" >> $TMP_OUT_FILE
    echo "${1}" >>$TMP_OUT_FILE && echo "" >> $TMP_OUT_FILE
}

cleanVariables(){
    unset IMAGES_ARRAY VERSION_REGEX TMP_OUT_FILE row_arr img_arr
}

addTitle "BUILD IMAGES"

# loop over script files in build folder to map all libraries and versions from build process
while read -r line; do
    if [ -f "../$line" ]; then
        lookupLibrariesInFile "../$line"
    fi
done < "./build"

addTitle "GO MOD"
cat ../go.mod >>  $TMP_OUT_FILE
addTitle "IMAGE SOURCES"

# Get from developer-tools/image_resources.md file
while read -r line; do

    #Read table only
    if echo "$line" | grep -q "[a-zA-Z]*\/"; then
    
        # Split table into array
        IFS='|' read -r -a row_arr <<<"$line"

        # Validate row Items  
        # chart | image | buildRepo | SourceImages | Hardened

        appendUniqueValueImagesArr "${row_arr[2]}"

        if echo "${row_arr[3]}" | grep -q "[a-zA-Z]*\/"; then
            appendUniqueValueImagesArr "${row_arr[3]}"
        fi

        if [ "${row_arr[4]}" != "" ]; then
            new=$(echo "${row_arr[4]}" | sed "s|<br>|;|g" | sed "s|â€£||g")

            IFS=';' read -r -a img_arr <<<"$new"

            for si in "${img_arr[@]}"; do
                appendUniqueValueImagesArr "${si}"
            done
        fi 
    fi

done < "../developer-docs/image_sources.md"

fillEnvVarsToFile && prettyOutfile
